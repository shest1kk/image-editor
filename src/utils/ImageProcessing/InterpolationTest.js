/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
 */
import { bilinearInterpolation, bicubicInterpolation, nearestNeighborInterpolation } from './InterpolationMethods.js';

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —á–µ—Ç–∫–∏–º–∏ –∫—Ä–∞—è–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
 * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {ImageData} –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
export function createTestPattern(width = 100, height = 100) {
  const imageData = new ImageData(width, height);
  const data = imageData.data;

  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const index = (y * width + x) * 4;
      
      // –°–æ–∑–¥–∞–µ–º —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
      if ((Math.floor(x / 10) + Math.floor(y / 10)) % 2 === 0) {
        // –ë–µ–ª—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã
        data[index] = 255;     // R
        data[index + 1] = 255; // G 
        data[index + 2] = 255; // B
        data[index + 3] = 255; // A
      } else {
        // –ß–µ—Ä–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã
        data[index] = 0;       // R
        data[index + 1] = 0;   // G
        data[index + 2] = 0;   // B
        data[index + 3] = 255; // A
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—É—é –ø–æ–ª–æ—Å—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
      if (y >= height / 2 - 5 && y <= height / 2 + 5) {
        data[index] = 255;     // R
        data[index + 1] = 0;   // G
        data[index + 2] = 0;   // B
        data[index + 3] = 255; // A
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—é—é –¥–∏–∞–≥–æ–Ω–∞–ª—å
      if (Math.abs(x - y) <= 2) {
        data[index] = 0;       // R
        data[index + 1] = 0;   // G
        data[index + 2] = 255; // B
        data[index + 3] = 255; // A
      }
    }
  }

  return imageData;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 * @param {ImageData} sourceImage - –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 * @param {number} newWidth - –ù–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞
 * @param {number} newHeight - –ù–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
 */
export function testAllInterpolationMethods(sourceImage, newWidth, newHeight, verbose = false) {
  if (verbose) {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: ${sourceImage.width}x${sourceImage.height} ‚Üí ${newWidth}x${newHeight}`);
  }
  
  const startTime = performance.now();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
  const results = {
    nearestNeighbor: {
      name: '–ë–ª–∏–∂–∞–π—à–∏–π —Å–æ—Å–µ–¥',
      startTime: performance.now()
    },
    bilinear: {
      name: '–ë–∏–ª–∏–Ω–µ–π–Ω–∞—è',
      startTime: performance.now()
    },
    bicubic: {
      name: '–ë–∏–∫—É–±–∏—á–µ—Å–∫–∞—è', 
      startTime: performance.now()
    }
  };

  // Nearest Neighbor
  results.nearestNeighbor.startTime = performance.now();
  results.nearestNeighbor.result = nearestNeighborInterpolation(sourceImage, newWidth, newHeight);
  results.nearestNeighbor.time = performance.now() - results.nearestNeighbor.startTime;

  // Bilinear
  results.bilinear.startTime = performance.now();
  results.bilinear.result = bilinearInterpolation(sourceImage, newWidth, newHeight);
  results.bilinear.time = performance.now() - results.bilinear.startTime;

  // Bicubic
  results.bicubic.startTime = performance.now();
  results.bicubic.result = bicubicInterpolation(sourceImage, newWidth, newHeight);
  results.bicubic.time = performance.now() - results.bicubic.startTime;

  const totalTime = performance.now() - startTime;

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω verbose —Ä–µ–∂–∏–º
  if (verbose) {
    console.table({
      '–ë–ª–∏–∂–∞–π—à–∏–π —Å–æ—Å–µ–¥': {
        '–í—Ä–µ–º—è (–º—Å)': results.nearestNeighbor.time.toFixed(2),
        '–†–∞–∑–º–µ—Ä': `${results.nearestNeighbor.result.width}x${results.nearestNeighbor.result.height}`,
        '–ö–∞—á–µ—Å—Ç–≤–æ': '–ë—ã—Å—Ç—Ä–æ, —Ä–µ–∑–∫–∏–µ –∫—Ä–∞—è'
      },
      '–ë–∏–ª–∏–Ω–µ–π–Ω–∞—è': {
        '–í—Ä–µ–º—è (–º—Å)': results.bilinear.time.toFixed(2),
        '–†–∞–∑–º–µ—Ä': `${results.bilinear.result.width}x${results.bilinear.result.height}`,
        '–ö–∞—á–µ—Å—Ç–≤–æ': '–°—Ä–µ–¥–Ω–µ, —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –∫—Ä–∞—è'
      },
      '–ë–∏–∫—É–±–∏—á–µ—Å–∫–∞—è': {
        '–í—Ä–µ–º—è (–º—Å)': results.bicubic.time.toFixed(2),
        '–†–∞–∑–º–µ—Ä': `${results.bicubic.result.width}x${results.bicubic.result.height}`,
        '–ö–∞—á–µ—Å—Ç–≤–æ': '–ú–µ–¥–ª–µ–Ω–Ω–æ, –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ'
      }
    });

    console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${totalTime.toFixed(2)}–º—Å`);
  }
  
  return results;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç canvas —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @param {Object} testResults - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å canvas —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
 */
export function createVisualComparison(testResults) {
  const canvases = {};
  
  Object.keys(testResults).forEach(method => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const result = testResults[method].result;
    
    canvas.width = result.width;
    canvas.height = result.height;
    canvas.style.border = '1px solid #ccc';
    canvas.style.margin = '5px';
    canvas.title = `${testResults[method].name} (${testResults[method].time.toFixed(2)}–º—Å)`;
    
    ctx.putImageData(result, 0, 0);
    canvases[method] = canvas;
  });
  
  return canvases;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
 * @param {number} sourceSize - –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} targetSize - –†–∞–∑–º–µ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function runInterpolationTest(sourceSize = 50, targetSize = 200, verbose = true) {
  if (verbose) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏...');
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const testImage = createTestPattern(sourceSize, sourceSize);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
  const results = testAllInterpolationMethods(testImage, targetSize, targetSize, verbose);
  
  // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
  const canvases = createVisualComparison(results);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
  if (typeof document !== 'undefined') {
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.top = '10px';
    container.style.right = '10px';
    container.style.background = 'white';
    container.style.padding = '10px';
    container.style.border = '2px solid #333';
    container.style.zIndex = '10000';
    container.style.borderRadius = '8px';
    container.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
    
    const title = document.createElement('h3');
    title.textContent = '–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏';
    title.style.margin = '0 0 10px 0';
    title.style.fontSize = '14px';
    container.appendChild(title);
    
    Object.keys(canvases).forEach(method => {
      const label = document.createElement('div');
      label.textContent = testResults[method].name;
      label.style.fontSize = '12px';
      label.style.textAlign = 'center';
      container.appendChild(label);
      container.appendChild(canvases[method]);
    });
    
    const closeButton = document.createElement('button');
    closeButton.textContent = '‚úï';
    closeButton.style.position = 'absolute';
    closeButton.style.top = '5px';
    closeButton.style.right = '5px';
    closeButton.style.border = 'none';
    closeButton.style.background = 'red';
    closeButton.style.color = 'white';
    closeButton.style.cursor = 'pointer';
    closeButton.style.borderRadius = '50%';
    closeButton.style.width = '20px';
    closeButton.style.height = '20px';
    closeButton.onclick = () => document.body.removeChild(container);
    container.appendChild(closeButton);
    
    document.body.appendChild(container);
  }
  
  return { results, canvases };
}
