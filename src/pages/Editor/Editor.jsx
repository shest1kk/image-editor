import React, { useRef, useContext, useEffect, useState, useCallback, useMemo } from "react";
import { Navigate } from "react-router-dom";
import { ImageContext } from "@/ImageProvider";
import "./Editor.css";

import ToolPanel from "@components/ToolPanel/ToolPanel";
import MenuBar from "@components/MenuBar/MenuBar";
import StatusBar from "@components/StatusBar/StatusBar";

import EditorCanvas from "@components/EditorCanvas/EditorCanvas";

import Modal from "@components/Modal/Modal";
import ScalingModal from "./ScalingModal/ScalingModal";
import ContextModal from "@components/ContextModal/ContextModal";
import CurvesModal from "./CurvesModal/CurvesModal";
import LayersPanel from "@components/LayersPanel/LayersPanel";
// import FilterModal from "./FilterModal/FilterModal";
import { GrayBit7Handler } from "@utils/ImageFormats/GrayBit7";
import { ColorDepthAnalyzer } from "@utils/ImageAnalysis/colorDepth";

import {
  updateTranslation,
  handleKeyDown,
  handleKeyUp,
  handleMouseUp,
  constrainImagePosition,
  constrainLayerPosition,
} from "@utils/CanvasChange/canvasKeyHand";


import { calculateFileSize } from "@utils/FileSize/fileSize";
import useLayers from "@hooks/useLayers";
import {
  extractRGB,
  rgbToXyz,
  rgbToLab,
  rgbToOKLch, 
  calculateContrast,
  formatColorForDisplay
} from "@utils/ColorSpaces/colorConversions";

const Editor = () => {
  const { image, setImage, filename } = useContext(ImageContext);

  const [toolActive, setToolActive] = useState("cursor");
  const [pipetteColor1, setPipetteColor1] = useState("");
  const [pipetteColor2, setPipetteColor2] = useState("");
  const [cursor, setCursor] = useState({ x: 0, y: 0 });
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });
  const [originalDimensions, setOriginalDimensions] = useState({ width: 0, height: 0 });
  const [colorDepth, setColorDepth] = useState('24-bit RGB');
  const [originalFormat, setOriginalFormat] = useState(null);
  const [fileSize, setFileSize] = useState(0);
  const [scaleFactor, setScaleFactor] = useState(100); // Default to 100%
  const [infoActive, setInfoActive] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const draggingTimeoutRef = useRef(null); // –¢–∞–π–º–µ—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ isDragging
  const [isActivelyMoving, setIsActivelyMoving] = useState(false); // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
  const movingTimeoutRef = useRef(null); // –¢–∞–π–º–µ—Ä –¥–ª—è —Ñ–ª–∞–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
  const [isZooming, setIsZooming] = useState(false); // –§–ª–∞–≥ –∑—É–º–∏—Ä–æ–≤–∞–Ω–∏—è
  const [needsRedraw, setNeedsRedraw] = useState(true); // –§–ª–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
  const [isActivelyZooming, setIsActivelyZooming] = useState(false); // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑—É–º–∏—Ä–æ–≤–∞–Ω–∏—è
  const zoomingTimeoutRef = useRef(null); // –¢–∞–π–º–µ—Ä –¥–ª—è —Ñ–ª–∞–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑—É–º–∏—Ä–æ–≤–∞–Ω–∏—è
  const [canvasTranslation, setCanvasTranslation] = useState({ x: 0, y: 0 });
  const [imageCoordinates, setImageCoordinates] = useState({
    base: { x: 0, y: 0 },
    extra: { x: 0, y: 0 },
  });
  const [showBg, setShowBg] = useState(false);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isModalCurvesOpen, setIsModalCurvesOpen] = useState(false);
  // const [isModalFilterOpen, setIsModalFilterOpen] = useState(false);
  const [isContextModalOpen, setIsContextModalOpen] = useState(false);
  const [showLayersPanel, setShowLayersPanel] = useState(false);

  // Layers management
  const {
    layers,
    activeLayerId,
    canvasRef: layersCanvasRef,
    initializeWithImage,
    addLayer,
    updateLayers,
    setActiveLayer,
    getActiveLayer,
    renderLayers,
    exportComposite,
    getLayersInfo
  } = useLayers();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–ª–æ–µ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const renumberLayers = useCallback((layersArray) => {
    return layersArray.map((layer, index) => {
      // –ù–æ–≤—ã–π —Å–ª–æ–π (index 0) –≤—Å–µ–≥–¥–∞ "–°–ª–æ–π 2" (–≤–µ—Ä—Ö–Ω–∏–π)
      if (index === 0) {
        return { ...layer, name: "–°–ª–æ–π 2" };
      }
      
      // –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (index 1) –≤—Å–µ–≥–¥–∞ "–°–ª–æ–π 1" (–Ω–∏–∂–Ω–∏–π)
      if (index === 1) {
        return { ...layer, name: "–°–ª–æ–π 1" };
      }
      
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–µ—Å–ª–∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ 2 —Å–ª–æ–µ–≤ –≤ –±—É–¥—É—â–µ–º)
      return {
        ...layer,
        name: `–°–ª–æ–π ${index + 1}`
      };
    });
  }, []);

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è updateLayers —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º
  const updateLayersWithRenumbering = useCallback((newLayers) => {
    console.log('üìù updateLayersWithRenumbering: –≤—ã–∑–≤–∞–Ω');
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º isZooming –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–ª–æ—ë–≤
    if (isZooming) {
      console.log('üîß updateLayersWithRenumbering: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å isZooming=false');
      setIsZooming(false);
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑—É–º–∞
      if (zoomTimeoutRef.current) {
        clearTimeout(zoomTimeoutRef.current);
        zoomTimeoutRef.current = null;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å —Å–ª–æ–∏
    const needsRenaming = newLayers.some((layer, index) => {
      const expectedName = `–°–ª–æ–π ${index + 1}`;
      return layer.name !== expectedName;
    });
    
    if (needsRenaming) {
      const renumberedLayers = renumberLayers(newLayers);
      updateLayers(renumberedLayers);
    } else {
      updateLayers(newLayers);
    }
    
    // –¢–û–õ–¨–ö–û –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–æ–µ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏  
    console.log('üé® updateLayersWithRenumbering: —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏');
    setNeedsRedraw(true);
  }, [updateLayers, renumberLayers, isZooming]);

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è updateLayers –±–µ–∑ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è (–¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
  const updateLayersWithoutRenumbering = useCallback((newLayers) => {
    updateLayers(newLayers);
    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–æ–µ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
    setNeedsRedraw(true);
  }, [updateLayers]);

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å —Å–ª–æ–∏
  const updateLayersForProperties = useCallback((newLayers) => {
    console.log('üîÑ updateLayersForProperties: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ —Å–ª–æ—ë–≤');
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º isZooming –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–ª–æ—ë–≤
    if (isZooming) {
      console.log('üîß updateLayersForProperties: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å isZooming=false');
      setIsZooming(false);
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑—É–º–∞
      if (zoomTimeoutRef.current) {
        clearTimeout(zoomTimeoutRef.current);
        zoomTimeoutRef.current = null;
      }
    }
    
    updateLayers(newLayers);
    // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ —Å–ª–æ–µ–≤ (–≤–∏–¥–∏–º–æ—Å—Ç—å, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, etc) —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
    setNeedsRedraw(true);
    console.log('üé® updateLayersForProperties: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω needsRedraw=true');
  }, [updateLayers, isZooming]);

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è addLayer —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º
  const addLayerWithRenumbering = useCallback((newLayer) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è "–°–ª–æ–π 2" –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ—è
    const layerWithCorrectName = {
      ...newLayer,
      name: "–°–ª–æ–π 2"
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π (–æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞)
    addLayer(layerWithCorrectName);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–ª–æ–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
    setTimeout(() => {
      const allLayers = [layerWithCorrectName, ...layers];
      const renumberedLayers = renumberLayers(allLayers);
      updateLayers(renumberedLayers);
      // –ù–æ–≤—ã–π —Å–ª–æ–π —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
      setNeedsRedraw(true);
    }, 10);
  }, [addLayer, layers, renumberLayers, updateLayers]);


  const canvas = useRef();
  const context = useRef();
  const animationFrameId = useRef(null);
  const isDraggingRef = useRef(false);
  const isMouseWheelDownRef = useRef(false);
  const scrollContainer = useRef(null);
  const zoomTimeoutRef = useRef(null);
  const renderTimeoutRef = useRef(null); // –î–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const positionTimeoutRef = useRef(null); // –î–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–∏

  const [isMouseDown, setIsMouseDown] = useState(false); // Track mouse button state
  const [selectedTool, setSelectedTool] = useState("cursor"); // New state to track selected tool
  const [isMouseWheel, setIsMouseWheel] = useState(false); // New state to track mouse wheel state

  const imageObj = new Image();
  imageObj.src = image;

  const [isDarkMode, setIsDarkMode] = useState(false);  // Changed to false for light mode by default

  const [anchorEl, setAnchorEl] = useState(null);
  const open = Boolean(anchorEl);

  const [history, setHistory] = useState([]);
  const [historyIndex, setHistoryIndex] = useState(-1);

  const [mouseCoords, setMouseCoords] = useState({ x: null, y: null });

  const [isMouseWheelDown, setIsMouseWheelDown] = useState(false);
  const [previousTool, setPreviousTool] = useState("cursor");
  const [handActivatedByWheel, setHandActivatedByWheel] = useState(false); // –§–ª–∞–≥: —Ä—É–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏

  const [imagePosition, setImagePosition] = useState({ x: 0, y: 0 });
  const [showScrollbars, setShowScrollbars] = useState(false);
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
  const handToolSensitivity = 0.5; // –î–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ "–†—É–∫–∞"
  const wheelDragSensitivity = 0.7; // –î–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏

  const formatFileSize = (bytes) => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / 1048576).toFixed(1) + ' MB';
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã –∏–∑ localStorage
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      setIsDarkMode(savedTheme === 'dark');
    } else {
      setIsDarkMode(false);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º false –≤–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      localStorage.setItem('theme', 'light');  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã –∫ body –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–µ –≤ localStorage
  useEffect(() => {
    document.body.classList.toggle('dark-mode', isDarkMode);
    document.body.classList.toggle('light-mode', !isDarkMode);
    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
  }, [isDarkMode]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–∞–º–∏
  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode);
  };

  const openModal = () => {
    setIsModalOpen(true);
    setToolActive("cursor");
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setIsModalCurvesOpen(false);
    // setIsModalFilterOpen(false);
  };

  const openContextModal = () => {
    setIsContextModalOpen(true);
    setToolActive("cursor");
    setInfoActive(true);
  };

  const closeContextModal = () => {
    setIsContextModalOpen(false);
    setToolActive("cursor");
    setSelectedTool("cursor"); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setInfoActive(false);
  };

  const handleScaleChange = (newScaleFactor) => {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ event –æ–±—ä–µ–∫—Ç—ã –∏ –ø—Ä—è–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const value = typeof newScaleFactor === 'object' ? newScaleFactor.target.value : newScaleFactor;
    const numValue = Number(value);
    console.log(`üîç handleScaleChange: –Ω–æ–≤—ã–π –º–∞—Å—à—Ç–∞–± ${numValue}%`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑—É–º–∏—Ä–æ–≤–∞–Ω–∏—è
    setIsActivelyZooming(true);
    if (zoomingTimeoutRef.current) {
      clearTimeout(zoomingTimeoutRef.current);
    }
    zoomingTimeoutRef.current = setTimeout(() => {
      setIsActivelyZooming(false);
      console.log('üîç handleScaleChange: —Å–±—Ä–æ—Å isActivelyZooming');
    }, 250); // 250ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑—É–º–∞
    
    setScaleFactor(numValue);
    
    // CSS —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ–ª—Å—Ç–∞
  useEffect(() => {
    if (!image) return;

    const img = new Image();
    img.src = image;
    img.crossOrigin = "anonymous";

    img.onload = () => {
      const workspace = document.querySelector(".workspace");
      if (!workspace) return;

      const { offsetWidth: workspaceWidth, offsetHeight: workspaceHeight } = workspace;
      const maxWidth = workspaceWidth - 100; // 50px –æ—Ç—Å—Ç—É–ø —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
      const maxHeight = workspaceHeight - 100; // 50px –æ—Ç—Å—Ç—É–ø —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã

      // –í—Å–µ–≥–¥–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ 50px
      const widthScale = maxWidth / img.width;
      const heightScale = maxHeight / img.height;
      let calculatedScale = Math.min(widthScale, heightScale) * 100;
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 12% - 300%
      const newScaleFactor = Math.max(12, Math.min(300, calculatedScale));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        setScaleFactor(newScaleFactor);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ
      setImagePosition({ x: 0, y: 0 });
      
      // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
      setNeedsRedraw(true);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setOriginalDimensions({ width: img.width, height: img.height });

      const canvasElement = canvas.current;
      if (!canvasElement) return;

      context.current = canvasElement.getContext("2d");
      context.current.imageSmoothingEnabled = true;

      canvasElement.width = workspaceWidth;
      canvasElement.height = workspaceHeight;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∞
      const savedFormatData = localStorage.getItem('imageFormatData');
      if (savedFormatData) {
        try {
          const formatData = JSON.parse(savedFormatData);
          setColorDepth(formatData.colorDepth || '24-bit RGB');
          setOriginalFormat(formatData);
        } catch (error) {
          setOriginalFormat(null);
          // Fallback –∫ –∞–Ω–∞–ª–∏–∑—É
          try {
            const colorDepthInfo = ColorDepthAnalyzer.analyzeColorDepth(img);
            setColorDepth(colorDepthInfo.description);
          } catch (analysisError) {
            setColorDepth('24-bit RGB');
          }
        }
      } else {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª—É–±–∏–Ω—É —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try {
          const colorDepthInfo = ColorDepthAnalyzer.analyzeColorDepth(img);
          setColorDepth(colorDepthInfo.description);
        } catch (error) {
          setColorDepth('24-bit RGB');
        }
        setOriginalFormat(null);
      }

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–ª–æ–µ–≤
      const redrawCanvas = () => {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        console.log('–°—Ç–∞—Ä–∞—è redrawCanvas - –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–µ–≤');
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö useEffect
      window.redrawCanvas = redrawCanvas;

      // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ drawImageOnCanvas useEffect
      calculateFileSize(img.src).then(size => setFileSize(formatFileSize(size)));
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∏ —Å –±–∞–∑–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      const imageName = filename || '–§–æ–Ω–æ–≤—ã–π —Å–ª–æ–π';
      initializeWithImage(image, imageName);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
      const handleWheel = (event) => {
        event.preventDefault();
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª/–∑—É–º –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        if (isDraggingRef.current || isMouseWheelDownRef.current) {
          return;
        }
        
        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑—É–º
        setIsZooming(true);
        console.log('üîç mouseWheel: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω isZooming=true');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
        if (zoomTimeoutRef.current) {
          clearTimeout(zoomTimeoutRef.current);
        }
        
        const delta = event.deltaY;
        const scaleStep = 10; // –®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑—É–º–∏—Ä–æ–≤–∞–Ω–∏—è
        setIsActivelyZooming(true);
        if (zoomingTimeoutRef.current) {
          clearTimeout(zoomingTimeoutRef.current);
        }
        zoomingTimeoutRef.current = setTimeout(() => {
          setIsActivelyZooming(false);
          console.log('üîç mouseWheel: —Å–±—Ä–æ—Å isActivelyZooming');
        }, 250); // 250ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑—É–º–∞

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π setter –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        setScaleFactor(currentScale => {
          let newScale = currentScale;
          
          if (delta < 0) { // –ö–æ–ª–µ—Å–∏–∫–æ –≤–≤–µ—Ä—Ö - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
            newScale = currentScale + scaleStep;
          } else { // –ö–æ–ª–µ—Å–∏–∫–æ –≤–Ω–∏–∑ - —É–º–µ–Ω—å—à–µ–Ω–∏–µ
            newScale = currentScale - scaleStep;
          }

          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 12% - 300%
          const finalScale = Math.max(12, Math.min(300, newScale));
          console.log(`üîç mouseWheel: –º–∞—Å—à—Ç–∞–± ${currentScale}% ‚Üí ${finalScale}%`);
          return finalScale;
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑—É–º–∞
        zoomTimeoutRef.current = setTimeout(() => {
          setIsZooming(false);
          console.log('‚úÖ mouseWheel: —Å–±—Ä–æ—à–µ–Ω isZooming=false (—Ç–∞–π–º–∞—É—Ç 500ms)');
        }, 500); // 500ms –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –∫–æ–ª–µ—Å–∞
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
      const handleTouchZoom = (event) => {
        if (event.touches.length === 2) {
          const touch1 = event.touches[1];
          const touch2 = event.touches[0];
          const distance = Math.sqrt(
            (touch1.clientX - touch2.clientX) ** 2 +
            (touch1.clientY - touch2.clientY) ** 2
          );
          const newScaleFactor = Math.max(10, Math.min(300, 200 / distance)); // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
          setScaleFactor(newScaleFactor);
        }
      };

      canvasElement.addEventListener("wheel", handleWheel);
      canvasElement.addEventListener("touchmove", handleTouchZoom);
      return () => {
        if (canvasElement) {
          canvasElement.removeEventListener("wheel", handleWheel);
          canvasElement.removeEventListener("touchmove", handleTouchZoom);
        }
      };
    };
  }, [image]); // –£–±–∏—Ä–∞–µ–º isDragging –∏ isMouseWheelDown –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –æ–Ω–∏ –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (renderTimeoutRef.current) {
        clearTimeout(renderTimeoutRef.current);
      }
      if (positionTimeoutRef.current) {
        clearTimeout(positionTimeoutRef.current);
      }
      if (draggingTimeoutRef.current) {
        clearTimeout(draggingTimeoutRef.current);
      }
      if (movingTimeoutRef.current) {
        clearTimeout(movingTimeoutRef.current);
      }
      if (zoomingTimeoutRef.current) {
        clearTimeout(zoomingTimeoutRef.current);
      }
      if (animationFrameId.current) {
        cancelAnimationFrame(animationFrameId.current);
      }
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω—ã –ª–∏ scrollbars
  const checkScrollbarsNeeded = useCallback(() => {
    if (!scrollContainer.current || !originalDimensions.width || !originalDimensions.height) {
      setShowScrollbars(false);
      return;
    }
    
    const containerElement = scrollContainer.current;
    const scaledWidth = originalDimensions.width * (scaleFactor / 100);
    const scaledHeight = originalDimensions.height * (scaleFactor / 100);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º scrollbars –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const needsScrollbars = scaledWidth > containerElement.clientWidth || scaledHeight > containerElement.clientHeight;
    setShowScrollbars(needsScrollbars);
    
    return needsScrollbars;
  }, [originalDimensions, scaleFactor]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ scrollbars —Å –ø–æ–∑–∏—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const syncScrollbarsWithImagePosition = useCallback(() => {
    if (!showScrollbars || !scrollContainer.current || !originalDimensions.width) return;
    
    const containerElement = scrollContainer.current;
    const scaledWidth = originalDimensions.width * (scaleFactor / 100);
    const scaledHeight = originalDimensions.height * (scaleFactor / 100);
    const padding = 100;
    
    const canvasWidth = scaledWidth + padding * 2;
    const canvasHeight = scaledHeight + padding * 2;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ viewport
    // –¶–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ canvas: (canvasWidth / 2, canvasHeight / 2)
    // –¶–µ–Ω—Ç—Ä viewport: (containerElement.clientWidth / 2, containerElement.clientHeight / 2)
    const baseCenterX = (canvasWidth / 2) - (containerElement.clientWidth / 2);
    const baseCenterY = (canvasHeight / 2) - (containerElement.clientHeight / 2);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
    const scrollX = baseCenterX - imagePosition.x;
    const scrollY = baseCenterY - imagePosition.y;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
    containerElement.scrollLeft = Math.max(0, Math.min(scrollX, canvasWidth - containerElement.clientWidth));
    containerElement.scrollTop = Math.max(0, Math.min(scrollY, canvasHeight - containerElement.clientHeight));
  }, [showScrollbars, originalDimensions, scaleFactor, imagePosition]);

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤ CSS/Canvas –æ–ø–µ—Ä–∞—Ü–∏–∏
  const getCompositeOperation = useCallback((blendMode) => {
    switch (blendMode) {
      case 'multiply':
        return 'multiply';
      case 'screen':
        return 'screen';
      case 'overlay':
        return 'overlay';
      case 'normal':
      default:
        return 'source-over';
    }
  }, []);

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ª–æ—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º canvas
  const renderImageLayerOnCanvas = useCallback((ctx, layer, canvasElement, scaledWidth, scaledHeight, needsScrollbars, drawBackground = true) => {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => {
        try {
          let centerX, centerY;
          
          if (needsScrollbars) {
            // –° –æ—Ç—Å—Ç—É–ø–∞–º–∏
            const padding = 100;
            centerX = (canvasElement.width - scaledWidth) / 2 + imagePosition.x + (layer.position?.x || 0);
            centerY = (canvasElement.height - scaledHeight) / 2 + imagePosition.y + (layer.position?.y || 0);
          } else {
            // –û–±—ã—á–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            centerX = (canvasElement.width - scaledWidth) / 2 + imagePosition.x + (layer.position?.x || 0);
            centerY = (canvasElement.height - scaledHeight) / 2 + imagePosition.y + (layer.position?.y || 0);
          }

          // –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
          if (drawBackground && originalFormat && originalFormat.metadata && originalFormat.metadata.hasMask) {
            drawTransparencyBackground(ctx, centerX, centerY, scaledWidth, scaledHeight);
          }

          // –ï—Å–ª–∏ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω, —Ä–µ–Ω–¥–µ—Ä–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
          if (layer.alphaChannel && !layer.alphaChannel.visible) {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            const tempCanvas = document.createElement('canvas');
            const tempCtx = tempCanvas.getContext('2d');
            tempCanvas.width = img.width;
            tempCanvas.height = img.height;
            
            // –ó–∞–ª–∏–≤–∞–µ–º –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
            tempCtx.fillStyle = '#ffffff';
            tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);
            
            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö
            tempCtx.drawImage(img, 0, 0);
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º canvas
            ctx.drawImage(tempCanvas, centerX, centerY, scaledWidth, scaledHeight);
          } else {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            ctx.drawImage(img, centerX, centerY, scaledWidth, scaledHeight);
          }
          
          resolve();
        } catch (error) {
          reject(error);
        }
      };
      img.onerror = reject;
      img.src = layer.data;
    });
  }, [imagePosition, originalFormat]);

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º canvas
  const renderColorLayerOnCanvas = useCallback((ctx, layer, canvasElement, scaledWidth, scaledHeight, needsScrollbars) => {
    let centerX, centerY;
    
    if (needsScrollbars) {
      const padding = 100;
      centerX = (canvasElement.width - scaledWidth) / 2 + imagePosition.x + (layer.position?.x || 0);
      centerY = (canvasElement.height - scaledHeight) / 2 + imagePosition.y + (layer.position?.y || 0);
    } else {
      centerX = (canvasElement.width - scaledWidth) / 2 + imagePosition.x + (layer.position?.x || 0);
      centerY = (canvasElement.height - scaledHeight) / 2 + imagePosition.y + (layer.position?.y || 0);
    }

    ctx.fillStyle = layer.data;
    ctx.fillRect(centerX, centerY, scaledWidth, scaledHeight);
  }, [imagePosition]);

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ª–æ–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º canvas
  const renderLayersOnCanvas = useCallback(async (canvasElement, scaledWidth, scaledHeight, needsScrollbars) => {
    const ctx = context.current;
    if (!ctx) return;

    let centerX, centerY;
    
    if (needsScrollbars) {
      // –° –æ—Ç—Å—Ç—É–ø–∞–º–∏
      const padding = 100;
      centerX = (canvasElement.width - scaledWidth) / 2 + imagePosition.x;
      centerY = (canvasElement.height - scaledHeight) / 2 + imagePosition.y;
    } else {
      // –û–±—ã—á–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
      centerX = (canvasElement.width - scaledWidth) / 2 + imagePosition.x;
      centerY = (canvasElement.height - scaledHeight) / 2 + imagePosition.y;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–µ —Å–ª–æ–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–∏–∂–Ω–∏–µ —Å–ª–æ–∏ –ø–µ—Ä–≤—ã–º–∏)
    const visibleLayers = [...layers].reverse().filter(layer => layer.visible);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —à–∞—Ö–º–∞—Ç–Ω—ã–π —Ñ–æ–Ω
    const hasTransparentImageLayers = visibleLayers.some(layer => 
      layer.type === 'image' && 
      originalFormat && 
      originalFormat.metadata && 
      originalFormat.metadata.hasMask
    );

    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ü–≤–µ—Ç–Ω—ã–µ —Å–ª–æ–∏ –ü–û–î –≤—Å–µ–º–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ —Å–ª–æ—è–º–∏
    let needsTransparencyBackground = false;
    
    if (hasTransparentImageLayers) {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Å–ª–æ–∏
      const transparentLayers = visibleLayers.filter(layer => 
        layer.type === 'image' && 
        originalFormat && 
        originalFormat.metadata && 
        originalFormat.metadata.hasMask
      );
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ —Å–ª–æ—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥ –Ω–∏–º —Ü–≤–µ—Ç–Ω—ã–µ —Å–ª–æ–∏
      for (const transparentLayer of transparentLayers) {
        const layerIndex = visibleLayers.indexOf(transparentLayer);
        const layersBelow = visibleLayers.slice(0, layerIndex);
        const hasColorBelow = layersBelow.some(layer => layer.type === 'color');
        
        if (!hasColorBelow) {
          needsTransparencyBackground = true;
          break;
        }
      }
    }

    // –†–∏—Å—É–µ–º —à–∞—Ö–º–∞—Ç–Ω—ã–π —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω
    if (needsTransparencyBackground) {
      drawTransparencyBackground(ctx, centerX, centerY, scaledWidth, scaledHeight);
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ª–æ–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ —Ä–∏—Å—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º = –ø–æ–≤–µ—Ä—Ö)
    for (const layer of visibleLayers) {
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ctx.save();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        ctx.globalAlpha = layer.opacity / 100;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        ctx.globalCompositeOperation = getCompositeOperation(layer.blendMode);

        if (layer.type === 'image') {
          await renderImageLayerOnCanvas(ctx, layer, canvasElement, scaledWidth, scaledHeight, needsScrollbars, false); // –ü–µ—Ä–µ–¥–∞–µ–º false –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞
        } else if (layer.type === 'color') {
          renderColorLayerOnCanvas(ctx, layer, canvasElement, scaledWidth, scaledHeight, needsScrollbars);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ctx.restore();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ª–æ—è:', layer.name, error);
      }
    }
  }, [layers, getCompositeOperation, renderImageLayerOnCanvas, renderColorLayerOnCanvas, imagePosition, originalFormat]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ canvas —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–ª–æ–µ–≤
  const drawImageOnCanvas = useCallback(async () => {
    const start = performance.now();
    console.log('üé® drawImageOnCanvas: –ù–ê–ß–ê–¢');
    
    if (!context.current || !canvas.current || layers.length === 0) {
      console.log('‚ùå drawImageOnCanvas: –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, canvas –∏–ª–∏ —Å–ª–æ–µ–≤');
      return;
    }
    
    const canvasElement = canvas.current;
    
    // –ò—â–µ–º –ª—é–±–æ–π —Å–ª–æ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–¥–∞–∂–µ —Å–∫—Ä—ã—Ç—ã–π) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    // –¢–∞–∫–∂–µ –∏—â–µ–º —Å–ª–æ–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω—å—à–µ –±—ã–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º originalDimensions)
    const imageLayer = layers.find(layer => layer.type === 'image');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –≤–∏–¥–∏–º—ã–µ —Å–ª–æ–∏ (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
    const hasVisibleLayers = layers.some(layer => layer.visible);
    if (!hasVisibleLayers) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö —Å–ª–æ–µ–≤ –≤–æ–æ–±—â–µ, –æ—á–∏—â–∞–µ–º canvas
      context.current.clearRect(0, 0, canvasElement.width, canvasElement.height);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å (–∏–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫)
    const currentScale = scaleFactor;
    const currentPosition = imagePosition;
    
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    // if (canvasElement.dataset.lastScale === currentScale.toString() && 
    //     canvasElement.dataset.lastPosition === JSON.stringify(currentPosition)) {
    //   console.log('üö´ Skipping redraw - same scale and position');
    //   return;
    // }
    
    if (imageLayer) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ä–∞–∑–º–µ—Ä—ã (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏)
      const img = new Image();
      img.src = imageLayer.data;
      
      await new Promise((resolve) => {
        img.onload = () => {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å —Ç–µ–∫—É—â–∏–º –º–∞—Å—à—Ç–∞–±–æ–º
          const scaledWidth = img.width * (scaleFactor / 100);
          const scaledHeight = img.height * (scaleFactor / 100);
          renderWithDimensions(canvasElement, scaledWidth, scaledHeight, resolve);
        };
      });
    } else if (originalDimensions.width && originalDimensions.height) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –Ω–æ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
      const scaledWidth = originalDimensions.width * (scaleFactor / 100);
      const scaledHeight = originalDimensions.height * (scaleFactor / 100);
      renderWithDimensions(canvasElement, scaledWidth, scaledHeight, () => {});
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Å–ª–æ—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
      const currentWidth = canvasElement.width;
      const currentHeight = canvasElement.height;
      renderWithDimensions(canvasElement, currentWidth, currentHeight, () => {});
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    function renderWithDimensions(canvasElement, scaledWidth, scaledHeight, resolve) {
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã –ª–∏ scrollbars –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const needsScrollbars = checkScrollbarsNeeded();
        
        if (needsScrollbars) {
          // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã scrollbars, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º canvas –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + –æ—Ç—Å—Ç—É–ø—ã
          const padding = 100;
          canvasElement.width = scaledWidth + padding * 2;
          canvasElement.height = scaledHeight + padding * 2;
        } else {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –ø–æ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          if (scrollContainer.current) {
            canvasElement.width = scrollContainer.current.clientWidth;
            canvasElement.height = scrollContainer.current.clientHeight;
          }
        }
        
        // –û—á–∏—â–∞–µ–º canvas
        context.current.clearRect(0, 0, canvasElement.width, canvasElement.height);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Å–ª–æ–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–ª–æ–µ–≤
        renderLayersOnCanvas(canvasElement, scaledWidth, scaledHeight, needsScrollbars);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º scrollbars –ø—Ä–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –∑—É–º–∞)
        if (needsScrollbars && scrollContainer.current && imagePosition.x === 0 && imagePosition.y === 0 && !isZooming) {
          setTimeout(() => {
            syncScrollbarsWithImagePosition();
          }, 0);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º dimensions –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        setDimensions({ width: scaledWidth, height: scaledHeight });
        
        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        // canvasElement.dataset.lastScale = currentScale.toString();
        // canvasElement.dataset.lastPosition = JSON.stringify(currentPosition);
        
        const end = performance.now();
        console.log(`üé® drawImageOnCanvas: –ó–ê–í–ï–†–®–ï–ù –∑–∞ ${(end - start).toFixed(2)}ms`);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
        setNeedsRedraw(false);
        
        resolve();
    }
  }, [layers, scaleFactor, imagePosition, checkScrollbarsNeeded, syncScrollbarsWithImagePosition, isZooming, renderLayersOnCanvas]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const transformString = useMemo(() => {
    const result = `translate(${imagePosition.x}px, ${imagePosition.y}px) scale(${scaleFactor / 100})`;
    console.log('üîÑ useMemo: transformString –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω', result, `position:`, imagePosition, `scale:`, scaleFactor);
    return result;
  }, [imagePosition.x, imagePosition.y, scaleFactor]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CSS —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
  const updateCanvasTransform = useCallback(() => {
    const start = performance.now();
    const canvasElement = canvas.current;
    if (!canvasElement) {
      console.log('‚ùå updateCanvasTransform: canvas –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ú–ì–ù–û–í–ï–ù–ù–û
    canvasElement.style.transform = transformString;
    canvasElement.style.transformOrigin = 'center center';
    
    const end = performance.now();
    console.log(`‚ö° updateCanvasTransform: –ø—Ä–∏–º–µ–Ω–µ–Ω –∑–∞ ${(end - start).toFixed(2)}ms`, transformString);
  }, [transformString]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤/—Ñ–∏–ª—å—Ç—Ä–æ–≤)
  const forceRedraw = useCallback(() => {
    console.log('üé® forceRedraw: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞');
    setNeedsRedraw(true);
  }, []);

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º window.redrawCanvas –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥
  useEffect(() => {
    window.redrawCanvas = () => {
      setNeedsRedraw(true);
      console.log('üîÑ window.redrawCanvas: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω needsRedraw=true');
    };
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ref'—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handleWheel
  useEffect(() => {
    isDraggingRef.current = isDragging;
  }, [isDragging]);

  useEffect(() => {
    isMouseWheelDownRef.current = isMouseWheelDown;
  }, [isMouseWheelDown]);

  // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
  useEffect(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ü–µ–Ω—Ç—Ä—É
    setImagePosition({ x: 0, y: 0 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º scrollbars –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
    const needsScrollbars = checkScrollbarsNeeded();
    
    // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã scrollbars, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º viewport –∫ —Ü–µ–Ω—Ç—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑—É–º–∞)
    if (needsScrollbars && scrollContainer.current && originalDimensions.width && !isZooming) {
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          const containerElement = scrollContainer.current;
          if (containerElement) {
            const scaledWidth = originalDimensions.width * (scaleFactor / 100);
            const scaledHeight = originalDimensions.height * (scaleFactor / 100);
            const padding = 100;
            
            const canvasWidth = scaledWidth + padding * 2;
            const canvasHeight = scaledHeight + padding * 2;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—ã–ª –≤ —Ü–µ–Ω—Ç—Ä–µ viewport
            // –¶–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ canvas: (canvasWidth / 2, canvasHeight / 2)
            // –¶–µ–Ω—Ç—Ä viewport: (containerElement.clientWidth / 2, containerElement.clientHeight / 2)
            const scrollX = (canvasWidth / 2) - (containerElement.clientWidth / 2);
            const scrollY = (canvasHeight / 2) - (containerElement.clientHeight / 2);
            
            containerElement.scrollLeft = Math.max(0, Math.min(scrollX, canvasWidth - containerElement.clientWidth));
            containerElement.scrollTop = Math.max(0, Math.min(scrollY, canvasHeight - containerElement.clientHeight));
          }
        });
      });
    }
  }, [scaleFactor, checkScrollbarsNeeded, originalDimensions, isZooming]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º scrollbars –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑—É–º–∞
  useEffect(() => {
    if (!isZooming) {
      syncScrollbarsWithImagePosition();
    }
  }, [isZooming, syncScrollbarsWithImagePosition]);

  // –°–æ–∑–¥–∞–µ–º –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤ —Å–ª–æ–µ–≤
  const layersSignature = useMemo(() => {
    return layers.map(layer => `${layer.id}-${layer.visible}-${layer.opacity}-${layer.blendMode}`).join('|');
  }, [layers]);

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–æ–µ–≤ (—Å debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è)
  useEffect(() => {
    if (layers.length > 0) {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
      if (zoomTimeoutRef.current) {
        clearTimeout(zoomTimeoutRef.current);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
      zoomTimeoutRef.current = setTimeout(() => {
        setNeedsRedraw(true);
        console.log('üîÑ useEffect[scaleFactor]: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω needsRedraw=true –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∑—É–º–∞');
      }, 50); // 50ms debounce
      
      return () => {
        if (zoomTimeoutRef.current) {
          clearTimeout(zoomTimeoutRef.current);
        }
      };
    }
  }, [layersSignature, drawImageOnCanvas]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
  const handleScroll = useCallback((e) => {
    if (!showScrollbars) return;
    
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: —Å–∫—Ä–æ–ª–ª -> –ø–æ–∑–∏—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  }, [showScrollbars]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º scrollbars –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    if (!isZooming) { // –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º—è –∑—É–º–∞
      syncScrollbarsWithImagePosition();
    }
  }, [imagePosition, syncScrollbarsWithImagePosition, isZooming]);

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º CSS —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏/–º–∞—Å—à—Ç–∞–±–∞
  useEffect(() => {
    console.log('üéØ useEffect: –∑–∞–ø—É—Å–∫ updateCanvasTransform');
    updateCanvasTransform();
  }, [updateCanvasTransform]);

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º canvas —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ò –ù–ï –î–í–ò–ì–ê–ï–ú –ò –ù–ï –ó–£–ú–ò–ú
  useEffect(() => {
    console.log(`üîç useEffect[needsRedraw]: needsRedraw=${needsRedraw}, —Å–æ—Å—Ç–æ—è–Ω–∏—è: isDragging=${isDragging}, isMouseWheelDown=${isMouseWheelDown}, isActivelyMoving=${isActivelyMoving}, isActivelyZooming=${isActivelyZooming}, isZooming=${isZooming}`);
    
    if (needsRedraw && !isDragging && !isMouseWheelDown && !isActivelyMoving && !isActivelyZooming && !isZooming) {
      console.log('üé® useEffect: –∑–∞–ø—É—Å–∫ drawImageOnCanvas (needsRedraw=true, –í–°–ï –§–õ–ê–ì–ò –ê–ö–¢–ò–í–ù–û–°–¢–ò=false)');
      drawImageOnCanvas();
      setNeedsRedraw(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
      console.log('‚úÖ useEffect: —Å–±—Ä–æ—à–µ–Ω needsRedraw=false –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏');
    } else {
      console.log(`üö´ useEffect: –ø—Ä–æ–ø—É—Å–∫ drawImageOnCanvas (–ø—Ä–∏—á–∏–Ω–∞: needsRedraw=${needsRedraw} –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)`);
    }
  }, [drawImageOnCanvas, needsRedraw, isDragging, isMouseWheelDown, isActivelyMoving, isActivelyZooming, isZooming]);

  const [currentColor, setCurrentColor] = useState("");

  // Ref –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ handleMouseMove
  const stateRef = useRef({});
  stateRef.current = {
    isDragging,
    toolActive,
    isMouseWheelDown,
    scaleFactor,
    cursor,
    dimensions,
    originalDimensions,
    handToolSensitivity,
    wheelDragSensitivity,
    imagePosition
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ - —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
  const handleMouseMove = useCallback((e) => {
    const canvasElement = canvas.current;
    if (!canvasElement) return;

    const rect = canvasElement.getBoundingClientRect();
    const x = Math.round(e.clientX - rect.left);
    const y = Math.round(e.clientY - rect.top);

    setCursor({ x, y });
    setMouseCoords({ x, y });

    // Calculate image position and dimensions
    const imageWidth = originalDimensions.width * (scaleFactor / 100);
    const imageHeight = originalDimensions.height * (scaleFactor / 100);
    const imageX = (canvasElement.width - imageWidth) / 2 + imagePosition.x; // Update to use imagePosition
    const imageY = (canvasElement.height - imageHeight) / 2 + imagePosition.y; // Update to use imagePosition

    // Check if cursor is over the image
    if (x >= imageX && x < imageX + imageWidth && y >= imageY && y < imageY + imageHeight) {
      // Add color picking logic when the pipette tool is active
      if (toolActive === "pipette") {
        const ctx = canvasElement.getContext('2d');
        const pixelData = ctx.getImageData(x, y, 1, 1).data;
        const color = `rgb(${pixelData[0]}, ${pixelData[1]}, ${pixelData[2]})`;
        setCurrentColor(color);
      }
    } else {

    }

    // Handle dragging for hand tool
    if (stateRef.current.isDragging && (stateRef.current.toolActive === "hand" || stateRef.current.isMouseWheelDown)) {
      const callId = Math.random().toString(36).substr(2, 9);
      console.log(`üñêÔ∏è handleMouseMove[${callId}]: –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ (toolActive=${stateRef.current.toolActive}, isMouseWheelDown=${stateRef.current.isMouseWheelDown})`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setIsActivelyMoving(true);
      if (movingTimeoutRef.current) {
        clearTimeout(movingTimeoutRef.current);
      }
      movingTimeoutRef.current = setTimeout(() => {
        setIsActivelyMoving(false);
        console.log('üîÑ handleMouseMove: —Å–±—Ä–æ—Å isActivelyMoving');
      }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞
      // –í—ã–±–∏—Ä–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
      let sensitivity = stateRef.current.isMouseWheelDown ? stateRef.current.wheelDragSensitivity : stateRef.current.handToolSensitivity;
      
      // –ï—Å–ª–∏ –∑–∞–∂–∞—Ç Shift - –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º (–º–µ–¥–ª–µ–Ω–Ω—ã–º)
      if (e.shiftKey) {
        sensitivity *= 0.2; // –£–º–µ–Ω—å—à–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ 5 —Ä–∞–∑
      }
      
      const dx = (x - stateRef.current.cursor.x) * sensitivity;
      const dy = (y - stateRef.current.cursor.y) * sensitivity;

      // –í–†–ï–ú–ï–ù–ù–û: –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤–º–µ—Å—Ç–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–ª–æ–µ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      // if (activeLayerId) {
      //   // –õ–æ–≥–∏–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å–ª–æ–µ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      //   console.log(`üé≠ –û–¢–ö–õ–Æ–ß–ï–ù–û: –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è ${activeLayerId}`);
      // } else {
      
      // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é (–±—ã—Å—Ç—Ä–æ —á–µ—Ä–µ–∑ CSS —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)
      setImagePosition(prevPosition => {
        const start = performance.now();
        console.log(`üñ±Ô∏è setImagePosition[${callId}]: start (dx=${dx}, dy=${dy})`);
        
        const newX = prevPosition.x + dx;
        const newY = prevPosition.y + dy;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const canvasElement = canvas.current;
        const containerElement = scrollContainer.current;
        if (!canvasElement || !containerElement) {
          console.log('‚ùå setImagePosition: –Ω–µ—Ç canvas –∏–ª–∏ container');
          return prevPosition;
        }
        
        const scaledImageWidth = stateRef.current.originalDimensions.width * (stateRef.current.scaleFactor / 100);
        const scaledImageHeight = stateRef.current.originalDimensions.height * (stateRef.current.scaleFactor / 100);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (viewport)
        const constrainedPosition = constrainImagePosition(
          newX, 
          newY, 
          containerElement.clientWidth, 
          containerElement.clientHeight, 
          scaledImageWidth, 
          scaledImageHeight
        );
        
        const end = performance.now();
        console.log(`üñ±Ô∏è setImagePosition[${callId}]: –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${(end - start).toFixed(2)}ms`, constrainedPosition);
        
        // CSS —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect
        return constrainedPosition;
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω—Ü–µ
    setCursor({ x, y });
    setMouseCoords({ x, y });
  }, []); // –ü—É—Å—Ç—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º stateRef –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

  const handleKeyDownEvent = (e) => {
    if (!canvas.current || !scrollContainer.current) return;
    const containerElement = scrollContainer.current;
    const scaledImageWidth = originalDimensions.width * (scaleFactor / 100);
    const scaledImageHeight = originalDimensions.height * (scaleFactor / 100);
    
    handleKeyDown(
      20, // step size –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      toolActive, 
      imagePosition, 
      setImagePosition, 
      containerElement.clientWidth, 
      containerElement.clientHeight, 
      scaledImageWidth, 
      scaledImageHeight, 
      e
    );
  };
  const handleKeyUpEvent = (e) => handleKeyUp(toolActive, e);
  const handleMouseUpEvent = (e) => {
    console.log(`üñ±Ô∏è handleMouseUpEvent: button=${e.button}, isDragging=${isDragging}`);
    
    if (e.button === 1) { // Middle mouse button
      handleMouseWheelUp(e);
    } else {
      // –ó–ê–î–ï–†–ñ–ö–ê –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º isDragging –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
      draggingTimeoutRef.current = setTimeout(() => {
        handleMouseUp(setIsDragging);
        setIsMouseDown(false);
        console.log(`üîß handleMouseUpEvent: —Å–±—Ä–æ—Å isDragging —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π`);
        draggingTimeoutRef.current = null;
      }, 200); // 200ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
    }
  };
  const handleMouseDownEvent = (e) => {
    console.log(`üñ±Ô∏è handleMouseDownEvent: button=${e.button}, toolActive=${toolActive}`);
    setIsMouseDown(true);
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –Ω–æ–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏
    if (draggingTimeoutRef.current) {
      clearTimeout(draggingTimeoutRef.current);
      draggingTimeoutRef.current = null;
      console.log(`üîß handleMouseDownEvent: –æ—á–∏—â–µ–Ω —Ç–∞–π–º–µ—Ä dragging`);
    }
    
    if (e.button === 1) { // Middle mouse button
      handleMouseWheelDown(e);
    } else if (toolActive === "hand") {
      console.log(`üñ±Ô∏è handleMouseDownEvent: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isDragging=true`);
      setIsDragging(true);
    }
  };

  const handleMouseWheelDown = (e) => {
    if (e.button === 1) { // Middle mouse button
      e.preventDefault(); // Prevent default scrolling behavior
      
      setIsMouseWheelDown(true);
      setHandActivatedByWheel(true); // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ä—É–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–ª–µ—Å–æ–º
      setPreviousTool(selectedTool); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–´–ë–†–ê–ù–ù–´–ô –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π
      setToolActive("hand");
      setSelectedTool("hand"); // –í–∏–∑—É–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä—É–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
      setIsDragging(true);
    }
  };

  const handleMouseWheelUp = (e) => {
    if (e.button === 1) { // Middle mouse button
      setIsMouseWheelDown(false);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä—É–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–ª–µ—Å–æ–º
      if (handActivatedByWheel) {
      setToolActive(previousTool);
        setSelectedTool(previousTool);
        setHandActivatedByWheel(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      }
      
      setIsDragging(false);
    }
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  useEffect(() => {
    const handleKeyDownShortcut = (event) => {
      switch (event.code) {
        case "KeyC":
          setSelectedTool("cursor");
          setToolActive("cursor");
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–∏–ø–µ—Ç–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –∫—É—Ä—Å–æ—Ä
          if (isContextModalOpen || infoActive) {
            setIsContextModalOpen(false);
            setInfoActive(false);
          }
          break;
        case "KeyP":
          setSelectedTool("pipette");
          setToolActive("pipette");
          setInfoActive(true);
          setIsContextModalOpen(true);
          break;
        case "KeyH":
          setSelectedTool("hand");
          setToolActive("hand");
          setHandActivatedByWheel(false); // –†—É–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ –Ω–µ –∫–æ–ª–µ—Å–æ–º
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–∏–ø–µ—Ç–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ä—É–∫—É
          if (isContextModalOpen || infoActive) {
            setIsContextModalOpen(false);
            setInfoActive(false);
          }
          break;
        default:
          break;
      }
    };

    window.addEventListener("keydown", handleKeyDownShortcut);
    // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ EditorCanvas —á–µ—Ä–µ–∑ React –ø—Ä–æ–ø—Å—ã
    // –î—É–±–ª–∏—Ä—É—é—â—É—é addEventListener —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –£–ë–†–ê–ù–ê –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    
    return () => {
      window.removeEventListener("keydown", handleKeyDownShortcut);
    };
  }, [selectedTool]);

  const handleExportClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
  const checkImageHasTransparency = (imageData) => {
    const data = imageData.data;
    for (let i = 3; i < data.length; i += 4) {
      if (data[i] < 255) {
        return true; // –ù–∞–π–¥–µ–Ω –ø–∏–∫—Å–µ–ª—å —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
      }
    }
    return false; // –í—Å–µ –ø–∏–∫—Å–µ–ª–∏ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –ø–æ–¥ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏
  const drawTransparencyBackground = (ctx, x, y, width, height) => {
    const squareSize = 10; // –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    
    ctx.save();
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
    for (let posY = Math.floor(y); posY < y + height; posY += squareSize) {
      for (let posX = Math.floor(x); posX < x + width; posX += squareSize) {
        const squareX = Math.floor((posX - x) / squareSize);
        const squareY = Math.floor((posY - y) / squareSize);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞ (–±–µ–ª—ã–π –∏–ª–∏ —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π)
        const isLight = (squareX + squareY) % 2 === 0;
        ctx.fillStyle = isLight ? '#ffffff' : '#e0e0e0';
        
        // –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const rectWidth = Math.min(squareSize, x + width - posX);
        const rectHeight = Math.min(squareSize, y + height - posY);
        
        if (rectWidth > 0 && rectHeight > 0) {
          ctx.fillRect(posX, posY, rectWidth, rectHeight);
        }
      }
    }
    
    ctx.restore();
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  const getExportFilename = (format) => {
    if (!filename) {
      return `editedImage.${format.toLowerCase()}`;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    const nameWithoutExt = filename.substring(0, filename.lastIndexOf('.')) || filename;
    return `${nameWithoutExt}.${format.toLowerCase()}`;
  };

  const handleDownload = (format) => {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –æ—Å–Ω–æ–≤–Ω–æ–π
    const tempCanvas = document.createElement('canvas');
    const tempContext = tempCanvas.getContext('2d');

    const img = new Image();
    img.src = image;
    img.crossOrigin = "anonymous";

    img.onload = () => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ canvas –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      tempCanvas.width = img.width;
      tempCanvas.height = img.height;
      
      // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–º canvas
      tempContext.drawImage(img, 0, 0);
      
      if (format === 'GB7') {
        // –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç GrayBit-7
        const imageData = tempContext.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∞—Å–∫–∞ (–µ—Å—Ç—å –ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)
        const hasTransparency = checkImageHasTransparency(imageData);
        
        const buffer = GrayBit7Handler.encode(imageData, hasTransparency);
        const exportFilename = getExportFilename('gb7');
        const url = GrayBit7Handler.createDownloadURL(buffer, exportFilename);
        
      const a = document.createElement("a");
      document.body.appendChild(a);
      a.href = url;
        a.download = exportFilename;
      a.click();
      document.body.removeChild(a);
        
        // –û—á–∏—â–∞–µ–º URL —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => URL.revokeObjectURL(url), 1000);
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        let url;
        if (format === 'JPG') {
          // –î–ª—è JPG —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ 90% (—É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞)
          url = tempCanvas.toDataURL('image/jpeg', 0.9);
        } else {
          // –î–ª—è PNG –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ –≤–ª–∏—è–µ—Ç (lossless), –Ω–æ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–∂–∞—Ç–∏–µ
          url = tempCanvas.toDataURL('image/png');
        }
        
        const exportFilename = getExportFilename(format);
        const a = document.createElement("a");
        document.body.appendChild(a);
        a.href = url;
        a.download = exportFilename;
        a.click();
        document.body.removeChild(a);
      }
    };
    handleClose();
  };


  const showPreview = (value) => setShowBg(value);

  const openCurvesModal = () => {
    setIsModalCurvesOpen(true);
    setToolActive("cursor");
  };

  const toggleLayersPanel = () => {
    setShowLayersPanel(prev => !prev);
  };

  // const openFilterModal = () => {
  //   setIsModalFilterOpen(true);
  //   setToolActive("cursor");
  // };

  const handleCanvasClick = (event) => {
    const canvasRef = canvas.current;
    if (!canvasRef) return;

    if (toolActive === "pipette") {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
      const rect = canvasRef.getBoundingClientRect();
      const canvasX = event.clientX - rect.left;
      const canvasY = event.clientY - rect.top;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ canvas
      const imageWidth = originalDimensions.width * (scaleFactor / 100);
      const imageHeight = originalDimensions.height * (scaleFactor / 100);
      const imageX = (canvasRef.width - imageWidth) / 2 + imagePosition.x;
      const imageY = (canvasRef.height - imageHeight) / 2 + imagePosition.y;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      if (canvasX >= imageX && canvasX < imageX + imageWidth && 
          canvasY >= imageY && canvasY < imageY + imageHeight) {
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã canvas –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageCoordX = Math.floor((canvasX - imageX) / (scaleFactor / 100));
        const imageCoordY = Math.floor((canvasY - imageY) / (scaleFactor / 100));

      const coordinates = {
          x: imageCoordX,
          y: imageCoordY,
        };

        // Alt/Ctrl/Shift –∫–ª–∏–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞, –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ
        if (event.altKey || event.ctrlKey || event.shiftKey) {
          setPipetteColor2(currentColor);
          setImageCoordinates((prev) => ({ ...prev, extra: coordinates }));
        } else {
          setPipetteColor1(currentColor);
          setImageCoordinates((prev) => ({ ...prev, base: coordinates }));
        }
      }
    }
  };

  const addToHistory = (newImage) => {
    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push(newImage);
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  };

  const undo = () => {
    if (historyIndex > 0) {
      setHistoryIndex(historyIndex - 1);
      setImage(history[historyIndex - 1]);
    }
  };

  const redo = () => {
    if (historyIndex < history.length - 1) {
      setHistoryIndex(historyIndex + 1);
      setImage(history[historyIndex + 1]);
    }
  };

  useEffect(() => {
    if (image && (history.length === 0 || image !== history[historyIndex])) {
      addToHistory(image);
    }
  }, [image]);

  const updateImage = (newImage, newFileSize) => {

    setImage(newImage);
    setFileSize(formatFileSize(newFileSize));

    addToHistory(newImage);
  };

  useEffect(() => {
    const handleKeyDownEventBody = (e) => {
      if (!canvas.current || !scrollContainer.current) return;
      const containerElement = scrollContainer.current;
      const scaledImageWidth = originalDimensions.width * (scaleFactor / 100);
      const scaledImageHeight = originalDimensions.height * (scaleFactor / 100);
      
      handleKeyDown(
        20, // step size –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        toolActive, 
        imagePosition, 
        setImagePosition, 
        containerElement.clientWidth, 
        containerElement.clientHeight, 
        scaledImageWidth, 
        scaledImageHeight, 
        e
      );
    };
    document.body.addEventListener("keydown", handleKeyDownEventBody);
    return () => document.body.removeEventListener("keydown", handleKeyDownEventBody);
  }, [toolActive, imagePosition, scaleFactor, originalDimensions]);

  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (!image) {
    return <Navigate to="/" replace />;
  }

  return (
    <section className={`editor ${isDarkMode ? 'dark-mode' : 'light-mode'}`}>
      <MenuBar 
        isDarkMode={isDarkMode}
        toggleTheme={toggleTheme}
        image={image}
        handleExportClick={handleExportClick}
        anchorEl={anchorEl}
        open={open}
        handleClose={handleClose}
        handleDownload={handleDownload}
        openModal={openModal}
        openCurvesModal={openCurvesModal}
        onToggleLayersPanel={toggleLayersPanel}
        // openFilterModal={openFilterModal}
        undo={undo}
        redo={redo}
        historyIndex={historyIndex}
        history={history}
      />
      <ToolPanel 
        selectedTool={selectedTool}
        setSelectedTool={setSelectedTool}
        setToolActive={setToolActive}
        setInfoActive={setInfoActive}
        setIsContextModalOpen={setIsContextModalOpen}
        isMouseWheelDown={isMouseWheelDown}
        setHandActivatedByWheel={setHandActivatedByWheel}
      />
      <EditorCanvas 
        canvasRef={canvas}
        toolActive={toolActive}
        isMouseWheelDown={isMouseWheelDown}
        handleCanvasClick={handleCanvasClick}
        handleMouseMove={handleMouseMove}
        handleMouseDownEvent={handleMouseDownEvent}
        handleMouseUpEvent={handleMouseUpEvent}
        handleKeyDownEvent={handleKeyDownEvent}
        handleKeyUpEvent={handleKeyUpEvent}
        isModalOpen={isModalOpen}
        scrollRef={scrollContainer}
        showScrollbars={showScrollbars}
        onScroll={handleScroll}
      />
      <StatusBar 
        image={image}
        dimensions={dimensions}
        originalDimensions={originalDimensions}
        fileSize={fileSize}
        mouseCoords={mouseCoords}
        colorDepth={colorDepth}
        scaleFactor={scaleFactor}
        onScaleChange={handleScaleChange}
      />
      <Modal isOpen={isModalOpen} onClose={closeModal} title="–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è">
        <ScalingModal image={imageObj} setImage={updateImage} closeModal={closeModal} />
      </Modal>
      <Modal w80 bg0={showBg} isOpen={isModalCurvesOpen} onClose={closeModal} title="–ö—Ä–∏–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è">
        {isModalCurvesOpen && <CurvesModal imageCtx={context} setImage={updateImage} closeModal={closeModal} showPreview={showPreview} />}
      </Modal>
      {/* <Modal bg0={showBg} isOpen={isModalFilterOpen} onClose={closeModal} title="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è">
        {isModalFilterOpen && <FilterModal imageCtx={context} setImage={updateImage} closeModal={closeModal} showPreview={showPreview} />}
      </Modal> */}
      <ContextModal
        isOpen={isContextModalOpen || toolActive === "pipette"}
        onClose={closeContextModal}
        title="–ü–∏–ø–µ—Ç–∫–∞"
      >
        <div className="editor__all-colors">
          {pipetteColor1 || pipetteColor2 ? (
            <>
              {/* –¶–≤–µ—Ç #1 */}
              {pipetteColor1 && (
                <div className="editor__color-section">
                  <h3 className="editor__color-title">–¶–≤–µ—Ç #1 (–∫–ª–∏–∫)</h3>
                  <div className="editor__color-info">
                    <div className="status-bar__color editor__color-swatch" style={{ backgroundColor: pipetteColor1 }}></div>
                    <div className="editor__color-details">
                      <p className="status-bar__text">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({imageCoordinates.base.x}, {imageCoordinates.base.y})</p>
                      <p className="status-bar__text">RGB: {formatColorForDisplay(pipetteColor1, originalFormat)}</p>
                      <p className="status-bar__text" title="CIE XYZ - —Ç—Ä–µ—Ö—Å—Ç–∏–º—É–ª—å–Ω–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≥–ª–∞–∑–∞">XYZ: {rgbToXyz(extractRGB(pipetteColor1))}</p>
                      <p className="status-bar__text" title="CIE Lab - –ø–µ—Ä—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. L: —è—Ä–∫–æ—Å—Ç—å (0-100), a: –∑–µ–ª—ë–Ω—ã–π-–∫—Ä–∞—Å–Ω—ã–π (-128 –¥–æ +127), b: —Å–∏–Ω–∏–π-–∂—ë–ª—Ç—ã–π (-128 –¥–æ +127)">Lab: {rgbToLab(extractRGB(pipetteColor1))}</p>
                      <p className="status-bar__text" title="OKLch - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–µ—Ä—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. L: —è—Ä–∫–æ—Å—Ç—å (0-1), C: —Ö—Ä–æ–º–∞/–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (0+), h: –æ—Ç—Ç–µ–Ω–æ–∫ (0-360¬∞)">OKLch: {rgbToOKLch(extractRGB(pipetteColor1))}</p>
            </div>
                  </div>
                </div>
              )}

              {/* –¶–≤–µ—Ç #2 */}
              {pipetteColor2 && (
                <div className="editor__color-section">
                  <h3 className="editor__color-title">–¶–≤–µ—Ç #2 (Alt/Ctrl/Shift + –∫–ª–∏–∫)</h3>
                  <div className="editor__color-info">
                    <div className="status-bar__color editor__color-swatch" style={{ backgroundColor: pipetteColor2 }}></div>
                    <div className="editor__color-details">
                      <p className="status-bar__text">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({imageCoordinates.extra.x}, {imageCoordinates.extra.y})</p>
                      <p className="status-bar__text">RGB: {formatColorForDisplay(pipetteColor2, originalFormat)}</p>
                      <p className="status-bar__text" title="CIE XYZ - —Ç—Ä–µ—Ö—Å—Ç–∏–º—É–ª—å–Ω–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≥–ª–∞–∑–∞">XYZ: {rgbToXyz(extractRGB(pipetteColor2))}</p>
                      <p className="status-bar__text" title="CIE Lab - –ø–µ—Ä—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. L: —è—Ä–∫–æ—Å—Ç—å (0-100), a: –∑–µ–ª—ë–Ω—ã–π-–∫—Ä–∞—Å–Ω—ã–π (-128 –¥–æ +127), b: —Å–∏–Ω–∏–π-–∂—ë–ª—Ç—ã–π (-128 –¥–æ +127)">Lab: {rgbToLab(extractRGB(pipetteColor2))}</p>
                      <p className="status-bar__text" title="OKLch - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–µ—Ä—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. L: —è—Ä–∫–æ—Å—Ç—å (0-1), C: —Ö—Ä–æ–º–∞/–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (0+), h: –æ—Ç—Ç–µ–Ω–æ–∫ (0-360¬∞)">OKLch: {rgbToOKLch(extractRGB(pipetteColor2))}</p>
                    </div>
                  </div>
                </div>
              )}

              {/* –ö–æ–Ω—Ç—Ä–∞—Å—Ç */}
              {pipetteColor1 && pipetteColor2 && (
                <div className="editor__contrast-section">
                  <h3 className="editor__color-title">–ö–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏</h3>
                  <p className="editor__contrast-info" title="–ö–æ–Ω—Ç—Ä–∞—Å—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ WCAG 2.1. –ú–∏–Ω–∏–º—É–º 4.5:1 –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, 3:1 –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞">
                    {calculateContrast(extractRGB(pipetteColor1), extractRGB(pipetteColor2))}
                  </p>
                </div>
              )}

              {/* –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º */}
              {currentColor && (
                <div className="editor__color-section">
                  <h3 className="editor__color-title">–¶–≤–µ—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º</h3>
                  <div className="editor__color-info">
                    <div className="status-bar__color editor__color-swatch" style={{ backgroundColor: currentColor }}></div>
                    <div className="editor__color-details">
                      <p className="status-bar__text">RGB: {formatColorForDisplay(currentColor, originalFormat)}</p>
                    </div>
                  </div>
                </div>
              )}
            </>
          ) : (
            <div className="editor__pipette-hint">
              <p className="status-bar__text">üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Ü–≤–µ—Ç–∞</p>
              <p className="status-bar__text">üí° Alt/Ctrl/Shift + –∫–ª–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞</p>
              <p className="status-bar__text">üí° –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–≤—É—Ö —Ü–≤–µ—Ç–æ–≤ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∏—Ö –∫–æ–Ω—Ç—Ä–∞—Å—Ç</p>
            </div>
          )}
        </div>
      </ContextModal>
      
      {/* Layers Panel */}
      {showLayersPanel && (
        <div className="editor__layers-panel">
          <LayersPanel
            layers={layers}
            activeLayerId={activeLayerId}
            onLayersChange={updateLayersWithRenumbering}
            onLayersReorder={updateLayersWithoutRenumbering}
            onLayersPropertiesChange={updateLayersForProperties}
            onActiveLayerChange={setActiveLayer}
            onAddLayer={addLayerWithRenumbering}
            maxLayers={2}
          />
        </div>
      )}
    </section>
  );
};

export default Editor;