import React, { useState, useRef, useCallback, useEffect } from 'react';

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
const CustomOpacitySlider = ({ value, onChange }) => {
  const [isDragging, setIsDragging] = useState(false);
  const sliderRef = useRef(null);

  // –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–ª—è–µ–º updateValue
  const updateValue = useCallback((e) => {
    if (!sliderRef.current) return;
    
    const rect = sliderRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));
    
    onChange && onChange(Math.round(percentage));
  }, [onChange]);

  // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å updateValue –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
  const handleMouseDown = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
    updateValue(e);
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞
    document.body.classList.add('dragging-slider');
  }, [updateValue]);

  const handleMouseMove = useCallback((e) => {
    if (!isDragging) return;
    e.preventDefault();
    e.stopPropagation();
    updateValue(e);
  }, [isDragging, updateValue]);

  const handleMouseUp = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞
    document.body.classList.remove('dragging-slider');
  }, []);

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è drag –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
  React.useEffect(() => {
    if (isDragging) {
      const handleGlobalMouseMove = (e) => {
        e.preventDefault();
        e.stopPropagation();
        handleMouseMove(e);
      };
      
      const handleGlobalMouseUp = (e) => {
        e.preventDefault();
        e.stopPropagation();
        handleMouseUp(e);
        // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å
        document.body.classList.remove('dragging-slider');
      };
      
      document.addEventListener('mousemove', handleGlobalMouseMove, { passive: false });
      document.addEventListener('mouseup', handleGlobalMouseUp, { passive: false });
      
      return () => {
        document.removeEventListener('mousemove', handleGlobalMouseMove);
        document.removeEventListener('mouseup', handleGlobalMouseUp);
      };
    }
  }, [isDragging, handleMouseMove, handleMouseUp]);

  return (
    <div
      ref={sliderRef}
      className="custom-opacity-slider"
      onMouseDown={handleMouseDown}
    >
      <div className="custom-opacity-slider__track">
        <div 
          className="custom-opacity-slider__fill"
          style={{ width: `${value}%` }}
        />
        <div 
          className="custom-opacity-slider__thumb"
          style={{ left: `${value}%` }}
        />
      </div>
    </div>
  );
};

const LayerItem = ({
  layer,
  index,
  isActive,
  blendModes,
  onSelect,
  onDelete,
  onToggleVisibility,
  onOpacityChange,
  onBlendModeChange,
  onLoadImage,
  onFillColor,
  onResetLayer,
  onDragStart,
  onDragOver,
  onDrop,
  onToggleAlphaChannel,
  onToggleAlphaVisibility,
  onDeleteAlphaChannel,
  canDelete
}) => {
  const [showActions, setShowActions] = useState(false);
  const [showBlendTooltip, setShowBlendTooltip] = useState(false);
  const [showColorPicker, setShowColorPicker] = useState(false);
  const [colorPickerValue, setColorPickerValue] = useState('#ffffff');
  const fileInputRef = useRef(null);
  const colorTimeoutRef = useRef(null);

  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file && file.type.startsWith('image/')) {
      onLoadImage && onLoadImage(file);
    }
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
    e.target.value = '';
  };

  const handleLoadImageClick = () => {
    fileInputRef.current?.click();
  };

  const handleFillColorClick = () => {
    if (!showColorPicker) {
      // –ï—Å–ª–∏ color picker —Å–∫—Ä—ã—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
      setShowColorPicker(true);
    }
    // –¶–≤–µ—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ handleColorChange
  };

  const handleColorChange = (e) => {
    const newColor = e.target.value;
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ UI
    setColorPickerValue(newColor);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
    if (colorTimeoutRef.current) {
      clearTimeout(colorTimeoutRef.current);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ —Å–ª–æ—é —Å debounce (–∑–∞–¥–µ—Ä–∂–∫–∞ 150ms)
    colorTimeoutRef.current = setTimeout(() => {
      onFillColor && onFillColor(newColor);
    }, 150);
  };

  const handleResetColor = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ª–æ–π –∫ –ø—É—Å—Ç–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    onResetLayer && onResetLayer();
    // –°–∫—Ä—ã–≤–∞–µ–º color picker
    setShowColorPicker(false);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫ –±–µ–ª–æ–º—É
    setColorPickerValue('#ffffff');
  };

  // –û—á–∏—Å—Ç–∫–∞ timeout –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (colorTimeoutRef.current) {
        clearTimeout(colorTimeoutRef.current);
      }
    };
  }, []);

  const getPreviewContent = () => {
    if (layer.preview) {
      return (
        <img 
          src={layer.preview} 
          alt={layer.name}
          className="layer-item__preview-image"
        />
      );
    }

    switch (layer.type) {
      case 'color':
        return (
          <div 
            className="layer-item__preview-color"
            style={{ backgroundColor: layer.data }}
          />
        );
      case 'image':
        return (
          <div className="layer-item__preview-placeholder">
            IMG
          </div>
        );
      default:
        return (
          <div className="layer-item__preview-empty">
            –ü—É—Å—Ç–æ
          </div>
        );
    }
  };

  return (
    <div 
      className={`layer-item ${isActive ? 'layer-item--active' : ''} ${showActions ? 'layer-item--expanded' : ''}`}
      draggable
      onDragStart={onDragStart}
      onDragOver={onDragOver}
      onDrop={onDrop}
      onClick={onSelect}
    >
      {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={handleFileSelect}
        style={{ display: 'none' }}
      />

      <div className="layer-item__main">
        {/* –ü—Ä–µ–≤—å—é —Å–ª–æ—è */}
        <div className="layer-item__preview">
          {getPreviewContent()}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–µ */}
        <div className="layer-item__info">
          <div className="layer-item__name">{layer.name}</div>
          <div className="layer-item__details">
            <span className="layer-item__type">
              {layer.type === 'image' && 'üñºÔ∏è'}
              {layer.type === 'color' && 'üé®'}
              {layer.type === 'empty' && 'üìÑ'}
            </span>
            <span className="layer-item__opacity">{layer.opacity}%</span>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="layer-item__controls">
          <button
            className={`layer-item__visibility ${layer.visible ? 'layer-item__visibility--visible' : 'layer-item__visibility--hidden'}`}
            onClick={(e) => {
              e.stopPropagation();
              onToggleVisibility && onToggleVisibility();
            }}
            title={layer.visible ? '–°–∫—Ä—ã—Ç—å —Å–ª–æ–π' : '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–π'}
          >
            {layer.visible ? 'üëÅÔ∏è' : 'üö´'}
          </button>

          <button
            className="layer-item__menu"
            onClick={(e) => {
              e.stopPropagation();
              setShowActions(!showActions);
            }}
            title="–î–µ–π—Å—Ç–≤–∏—è"
          >
            ‚ãÆ
          </button>
        </div>
      </div>

      {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      {showActions && (
        <div className="layer-item__actions">
          {/* –ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å */}
          <div 
            className="layer-item__action-group"
            draggable={false}
            onDragStart={(e) => e.preventDefault()}
          >
            <label className="layer-item__action-label">–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</label>
            <CustomOpacitySlider
              value={layer.opacity}
              onChange={(value) => {
                onOpacityChange && onOpacityChange(value);
              }}
            />
            <span className="layer-item__opacity-value">{layer.opacity}%</span>
          </div>

          {/* –†–µ–∂–∏–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è */}
          <div className="layer-item__action-group">
            <label className="layer-item__action-label">–ù–∞–ª–æ–∂–µ–Ω–∏–µ:</label>
            <div style={{ position: 'relative' }}>
              <select
                value={layer.blendMode}
                onChange={(e) => {
                  e.stopPropagation();
                  onBlendModeChange && onBlendModeChange(e.target.value);
                }}
                onMouseEnter={() => setShowBlendTooltip(true)}
                onMouseLeave={() => setShowBlendTooltip(false)}
                className="layer-item__blend-select"
              >
                {Object.entries(blendModes).map(([mode, config]) => (
                  <option key={mode} value={mode} title={config.description}>
                    {config.name}
                  </option>
                ))}
              </select>
              
              {/* Tooltip –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ –Ω–∞–ª–æ–∂–µ–Ω–∏—è */}
              {showBlendTooltip && (
                <div className="layer-item__blend-tooltip">
                  <strong>{blendModes[layer.blendMode]?.name}</strong>
                  <br />
                  {blendModes[layer.blendMode]?.description}
                </div>
              )}
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º */}
          <div className="layer-item__action-group">
            <div className="layer-item__content-actions">
              <button
                className="layer-item__action-btn"
                onClick={(e) => {
                  e.stopPropagation();
                  handleLoadImageClick();
                }}
                title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
              >
                üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              </button>
              
              <div className="layer-item__color-action">
                {showColorPicker && (
                  <input
                    type="color"
                    value={colorPickerValue}
                    onChange={(e) => {
                      e.stopPropagation();
                      handleColorChange(e);
                    }}
                    onMouseUp={() => {
                      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –º—ã—à–∏
                      if (colorTimeoutRef.current) {
                        clearTimeout(colorTimeoutRef.current);
                      }
                      onFillColor && onFillColor(colorPickerValue);
                    }}
                    className="layer-item__color-picker"
                    title="–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç"
                  />
                )}
                <button
                  className="layer-item__action-btn"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleFillColorClick();
                  }}
                  title={showColorPicker ? "–¶–≤–µ—Ç –≤—ã–±—Ä–∞–Ω" : "–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞"}
                  style={showColorPicker ? {
                    background: `linear-gradient(45deg, ${colorPickerValue} 50%, #f0f0f0 50%)`,
                    color: '#333'
                  } : {}}
                >
                  üé® –¶–≤–µ—Ç
                </button>
                
                {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ü–≤–µ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–æ–π —Ü–≤–µ—Ç–Ω–æ–π */}
                {layer.type === 'color' && (
                  <button
                    className="layer-item__action-btn layer-item__action-btn--secondary"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleResetColor();
                    }}
                    title={layer.originalState ? 
                      "–£–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" : 
                      "–£–±—Ä–∞—Ç—å —Ü–≤–µ—Ç (—Å–¥–µ–ª–∞—Ç—å —Å–ª–æ–π –ø—É—Å—Ç—ã–º)"
                    }
                  >
                    {layer.originalState ? 'üîÑ –û—Ç–º–µ–Ω–∏—Ç—å' : 'üóëÔ∏è –°–±—Ä–æ—Å'}
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* –ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª */}
          <div className="layer-item__action-group">
            <label className="layer-item__action-label">–ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª:</label>
            <div className="layer-item__alpha-actions">
              {layer.alphaChannel ? (
                <>
                  {/* –ü—Ä–µ–≤—å—é –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞ */}
                  <div className="layer-item__alpha-preview">
                    {layer.alphaChannel.preview && (
                      <img 
                        src={layer.alphaChannel.preview} 
                        alt="Alpha channel preview"
                        className="layer-item__alpha-preview-image"
                        title="–ü—Ä–µ–≤—å—é –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞"
                      />
                    )}
                  </div>
                  
                  <div className="layer-item__alpha-controls">
                    <button
                      className={`layer-item__action-btn ${layer.alphaChannel.visible ? 'layer-item__action-btn--active' : ''}`}
                      onClick={(e) => {
                        e.stopPropagation();
                        onToggleAlphaVisibility && onToggleAlphaVisibility();
                      }}
                      title={layer.alphaChannel.visible ? "–°–∫—Ä—ã—Ç—å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª" : "–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª"}
                    >
                      {layer.alphaChannel.visible ? 'üëÅÔ∏è' : 'üö´'} –ê–ª—å—Ñ–∞
                    </button>
                    <button
                      className="layer-item__action-btn layer-item__action-btn--danger"
                      onClick={(e) => {
                        e.stopPropagation();
                        onDeleteAlphaChannel && onDeleteAlphaChannel();
                      }}
                      title="–£–¥–∞–ª–∏—Ç—å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </>
              ) : (
                <button
                  className="layer-item__action-btn"
                  onClick={(e) => {
                    e.stopPropagation();
                    onToggleAlphaChannel && onToggleAlphaChannel();
                  }}
                  title="–î–æ–±–∞–≤–∏—Ç—å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª"
                >
                  ‚ûï –ê–ª—å—Ñ–∞
                </button>
              )}
            </div>
          </div>

          {/* –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—è */}
          {canDelete && (
            <div className="layer-item__action-group">
              <button
                className="layer-item__action-btn layer-item__action-btn--danger"
                onClick={(e) => {
                  e.stopPropagation();
                  if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–π "${layer.name}"?`)) {
                    onDelete && onDelete();
                  }
                }}
                title="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–π"
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–π
              </button>
            </div>
          )}
        </div>
      )}

    </div>
  );
};

export default LayerItem;
